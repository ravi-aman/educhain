"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/helper/connectWallet.js":
/*!*************************************!*\
  !*** ./src/helper/connectWallet.js ***!
  \*************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkWalletConnection: () => (/* binding */ checkWalletConnection),\n/* harmony export */   connectWallet: () => (/* binding */ connectWallet)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n\n/**\r\n * Function to request wallet connection using MetaMask.\r\n * @param {Function} setAccount - State setter function to store the connected account.\r\n */ const connectWallet = async (setAccount)=>{\n    if ( true && window.ethereum) {\n        try {\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.BrowserProvider(window.ethereum);\n            const accounts = await provider.send(\"eth_requestAccounts\", []);\n            setAccount(accounts[0]);\n            console.log(\"Wallet Connected:\", accounts[0]);\n        } catch (error) {\n            console.error(\"Wallet connection failed\", error);\n        }\n    } else {\n        alert(\"Please install MetaMask!\");\n    }\n};\n/**\r\n * Function to check if a wallet is already connected.\r\n * @param {Function} setAccount - State setter function to store the connected account.\r\n */ const checkWalletConnection = async (setAccount)=>{\n    if ( true && window.ethereum) {\n        try {\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.BrowserProvider(window.ethereum);\n            const accounts = await provider.listAccounts();\n            if (accounts.length > 0) {\n                setAccount(accounts[0]);\n                console.log(\"Already Connected:\", accounts[0]);\n            }\n        } catch (error) {\n            console.error(\"Error checking wallet connection\", error);\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9oZWxwZXIvY29ubmVjdFdhbGxldC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0M7QUFFaEM7OztDQUdDLEdBQ00sTUFBTUMsZ0JBQWdCLE9BQU9DO0lBQ2hDLElBQUksS0FBNkIsSUFBSUMsT0FBT0MsUUFBUSxFQUFFO1FBQ2xELElBQUk7WUFDQSxNQUFNQyxXQUFXLElBQUlMLG1EQUFzQixDQUFDRyxPQUFPQyxRQUFRO1lBQzNELE1BQU1HLFdBQVcsTUFBTUYsU0FBU0csSUFBSSxDQUFDLHVCQUF1QixFQUFFO1lBQzlETixXQUFXSyxRQUFRLENBQUMsRUFBRTtZQUN0QkUsUUFBUUMsR0FBRyxDQUFDLHFCQUFxQkgsUUFBUSxDQUFDLEVBQUU7UUFDaEQsRUFBRSxPQUFPSSxPQUFPO1lBQ1pGLFFBQVFFLEtBQUssQ0FBQyw0QkFBNEJBO1FBQzlDO0lBQ0osT0FBTztRQUNIQyxNQUFNO0lBQ1Y7QUFDSixFQUFFO0FBRUY7OztDQUdDLEdBQ00sTUFBTUMsd0JBQXdCLE9BQU9YO0lBQ3hDLElBQUksS0FBNkIsSUFBSUMsT0FBT0MsUUFBUSxFQUFFO1FBQ2xELElBQUk7WUFDQSxNQUFNQyxXQUFXLElBQUlMLG1EQUFzQixDQUFDRyxPQUFPQyxRQUFRO1lBQzNELE1BQU1HLFdBQVcsTUFBTUYsU0FBU1MsWUFBWTtZQUM1QyxJQUFJUCxTQUFTUSxNQUFNLEdBQUcsR0FBRztnQkFDckJiLFdBQVdLLFFBQVEsQ0FBQyxFQUFFO2dCQUN0QkUsUUFBUUMsR0FBRyxDQUFDLHNCQUFzQkgsUUFBUSxDQUFDLEVBQUU7WUFDakQ7UUFDSixFQUFFLE9BQU9JLE9BQU87WUFDWkYsUUFBUUUsS0FBSyxDQUFDLG9DQUFvQ0E7UUFDdEQ7SUFDSjtBQUNKLEVBQUUiLCJzb3VyY2VzIjpbIkY6XFxza3VsbGFpXFxzcmNcXGhlbHBlclxcY29ubmVjdFdhbGxldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBldGhlcnMgfSBmcm9tIFwiZXRoZXJzXCI7XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gdG8gcmVxdWVzdCB3YWxsZXQgY29ubmVjdGlvbiB1c2luZyBNZXRhTWFzay5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0QWNjb3VudCAtIFN0YXRlIHNldHRlciBmdW5jdGlvbiB0byBzdG9yZSB0aGUgY29ubmVjdGVkIGFjY291bnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY29ubmVjdFdhbGxldCA9IGFzeW5jIChzZXRBY2NvdW50KSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuZXRoZXJldW0pIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBldGhlcnMuQnJvd3NlclByb3ZpZGVyKHdpbmRvdy5ldGhlcmV1bSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgcHJvdmlkZXIuc2VuZChcImV0aF9yZXF1ZXN0QWNjb3VudHNcIiwgW10pO1xyXG4gICAgICAgICAgICBzZXRBY2NvdW50KGFjY291bnRzWzBdKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJXYWxsZXQgQ29ubmVjdGVkOlwiLCBhY2NvdW50c1swXSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIldhbGxldCBjb25uZWN0aW9uIGZhaWxlZFwiLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBhbGVydChcIlBsZWFzZSBpbnN0YWxsIE1ldGFNYXNrIVwiKTtcclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBGdW5jdGlvbiB0byBjaGVjayBpZiBhIHdhbGxldCBpcyBhbHJlYWR5IGNvbm5lY3RlZC5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0QWNjb3VudCAtIFN0YXRlIHNldHRlciBmdW5jdGlvbiB0byBzdG9yZSB0aGUgY29ubmVjdGVkIGFjY291bnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY2hlY2tXYWxsZXRDb25uZWN0aW9uID0gYXN5bmMgKHNldEFjY291bnQpID0+IHtcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5ldGhlcmV1bSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IGV0aGVycy5Ccm93c2VyUHJvdmlkZXIod2luZG93LmV0aGVyZXVtKTtcclxuICAgICAgICAgICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBwcm92aWRlci5saXN0QWNjb3VudHMoKTtcclxuICAgICAgICAgICAgaWYgKGFjY291bnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHNldEFjY291bnQoYWNjb3VudHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBbHJlYWR5IENvbm5lY3RlZDpcIiwgYWNjb3VudHNbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNoZWNraW5nIHdhbGxldCBjb25uZWN0aW9uXCIsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJldGhlcnMiLCJjb25uZWN0V2FsbGV0Iiwic2V0QWNjb3VudCIsIndpbmRvdyIsImV0aGVyZXVtIiwicHJvdmlkZXIiLCJCcm93c2VyUHJvdmlkZXIiLCJhY2NvdW50cyIsInNlbmQiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJhbGVydCIsImNoZWNrV2FsbGV0Q29ubmVjdGlvbiIsImxpc3RBY2NvdW50cyIsImxlbmd0aCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/helper/connectWallet.js\n"));

/***/ })

});