"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/helper/connectWallet.js":
/*!*************************************!*\
  !*** ./src/helper/connectWallet.js ***!
  \*************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkWalletConnection: () => (/* binding */ checkWalletConnection),\n/* harmony export */   connectWallet: () => (/* binding */ connectWallet)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n\nconst connectWallet = async (setAccount)=>{\n    if ( true && window.ethereum) {\n        try {\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.BrowserProvider(window.ethereum);\n            const accounts = await provider.send(\"eth_requestAccounts\", []);\n            setAccount(accounts[0].toString()); // Ensuring string conversion\n            console.log(\"Wallet Connected:\", accounts[0]);\n        } catch (error) {\n            console.error(\"Wallet connection failed\", error);\n        }\n    } else {\n        alert(\"Please install MetaMask!\");\n    }\n};\nconst checkWalletConnection = async (setAccount)=>{\n    if ( true && window.ethereum) {\n        try {\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.BrowserProvider(window.ethereum);\n            const accounts = await provider.listAccounts();\n            if (accounts.length > 0) {\n                setAccount(accounts[0].toString()); // Ensuring string conversion\n                console.log(\"Already Connected:\", accounts[0]);\n            }\n        } catch (error) {\n            console.error(\"Error checking wallet connection\", error);\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9oZWxwZXIvY29ubmVjdFdhbGxldC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0M7QUFFekIsTUFBTUMsZ0JBQWdCLE9BQU9DO0lBQ2xDLElBQUksS0FBNkIsSUFBSUMsT0FBT0MsUUFBUSxFQUFFO1FBQ3BELElBQUk7WUFDRixNQUFNQyxXQUFXLElBQUlMLG1EQUFzQixDQUFDRyxPQUFPQyxRQUFRO1lBQzNELE1BQU1HLFdBQVcsTUFBTUYsU0FBU0csSUFBSSxDQUFDLHVCQUF1QixFQUFFO1lBQzlETixXQUFXSyxRQUFRLENBQUMsRUFBRSxDQUFDRSxRQUFRLEtBQUssNkJBQTZCO1lBQ2pFQyxRQUFRQyxHQUFHLENBQUMscUJBQXFCSixRQUFRLENBQUMsRUFBRTtRQUM5QyxFQUFFLE9BQU9LLE9BQU87WUFDZEYsUUFBUUUsS0FBSyxDQUFDLDRCQUE0QkE7UUFDNUM7SUFDRixPQUFPO1FBQ0xDLE1BQU07SUFDUjtBQUNGLEVBQUU7QUFFSyxNQUFNQyx3QkFBd0IsT0FBT1o7SUFDMUMsSUFBSSxLQUE2QixJQUFJQyxPQUFPQyxRQUFRLEVBQUU7UUFDcEQsSUFBSTtZQUNGLE1BQU1DLFdBQVcsSUFBSUwsbURBQXNCLENBQUNHLE9BQU9DLFFBQVE7WUFDM0QsTUFBTUcsV0FBVyxNQUFNRixTQUFTVSxZQUFZO1lBQzVDLElBQUlSLFNBQVNTLE1BQU0sR0FBRyxHQUFHO2dCQUN2QmQsV0FBV0ssUUFBUSxDQUFDLEVBQUUsQ0FBQ0UsUUFBUSxLQUFLLDZCQUE2QjtnQkFDakVDLFFBQVFDLEdBQUcsQ0FBQyxzQkFBc0JKLFFBQVEsQ0FBQyxFQUFFO1lBQy9DO1FBQ0YsRUFBRSxPQUFPSyxPQUFPO1lBQ2RGLFFBQVFFLEtBQUssQ0FBQyxvQ0FBb0NBO1FBQ3BEO0lBQ0Y7QUFDRixFQUFFIiwic291cmNlcyI6WyJGOlxcc2t1bGxhaVxcc3JjXFxoZWxwZXJcXGNvbm5lY3RXYWxsZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSBcImV0aGVyc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbm5lY3RXYWxsZXQgPSBhc3luYyAoc2V0QWNjb3VudCkgPT4ge1xyXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5ldGhlcmV1bSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgZXRoZXJzLkJyb3dzZXJQcm92aWRlcih3aW5kb3cuZXRoZXJldW0pO1xyXG4gICAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IHByb3ZpZGVyLnNlbmQoXCJldGhfcmVxdWVzdEFjY291bnRzXCIsIFtdKTtcclxuICAgICAgc2V0QWNjb3VudChhY2NvdW50c1swXS50b1N0cmluZygpKTsgLy8gRW5zdXJpbmcgc3RyaW5nIGNvbnZlcnNpb25cclxuICAgICAgY29uc29sZS5sb2coXCJXYWxsZXQgQ29ubmVjdGVkOlwiLCBhY2NvdW50c1swXSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiV2FsbGV0IGNvbm5lY3Rpb24gZmFpbGVkXCIsIGVycm9yKTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgYWxlcnQoXCJQbGVhc2UgaW5zdGFsbCBNZXRhTWFzayFcIik7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNoZWNrV2FsbGV0Q29ubmVjdGlvbiA9IGFzeW5jIChzZXRBY2NvdW50KSA9PiB7XHJcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmV0aGVyZXVtKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBldGhlcnMuQnJvd3NlclByb3ZpZGVyKHdpbmRvdy5ldGhlcmV1bSk7XHJcbiAgICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgcHJvdmlkZXIubGlzdEFjY291bnRzKCk7XHJcbiAgICAgIGlmIChhY2NvdW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgc2V0QWNjb3VudChhY2NvdW50c1swXS50b1N0cmluZygpKTsgLy8gRW5zdXJpbmcgc3RyaW5nIGNvbnZlcnNpb25cclxuICAgICAgICBjb25zb2xlLmxvZyhcIkFscmVhZHkgQ29ubmVjdGVkOlwiLCBhY2NvdW50c1swXSk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjaGVja2luZyB3YWxsZXQgY29ubmVjdGlvblwiLCBlcnJvcik7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG4iXSwibmFtZXMiOlsiZXRoZXJzIiwiY29ubmVjdFdhbGxldCIsInNldEFjY291bnQiLCJ3aW5kb3ciLCJldGhlcmV1bSIsInByb3ZpZGVyIiwiQnJvd3NlclByb3ZpZGVyIiwiYWNjb3VudHMiLCJzZW5kIiwidG9TdHJpbmciLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJhbGVydCIsImNoZWNrV2FsbGV0Q29ubmVjdGlvbiIsImxpc3RBY2NvdW50cyIsImxlbmd0aCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/helper/connectWallet.js\n"));

/***/ })

});